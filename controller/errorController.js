const AppError = require("../utils/AppError.js");

// ËôïÁêÜ MongoDB CastErrorÔºåÁï∂Ë´ãÊ±ÇÁöÑË≥áÊñôÊ†ºÂºè‰∏çÊ≠£Á¢∫ÊôÇËß∏Áôº„ÄÇ
const handleCastErrorDB = (err) => {
  const message = `Invalid ${err.path}: ${err.value}.`;
  return new AppError(message, 400);
};

// ËôïÁêÜ MongoDB duplicate key errorÔºåÁï∂ÂòóË©¶ÊèíÂÖ•ÈáçË§áÁöÑÂîØ‰∏ÄÂ≠óÊÆµÂÄºÊôÇËß∏Áôº
const handleDuplicateFieldsDB = (err) => {
  // Object ÊòØÁî®‰æÜÊìç‰Ωú keyValue ÁöÑ JS Â∑•ÂÖ∑ÔºåÂèØÁî®Êñº‰ªª‰ΩïÂ∞çË±°‰ª•ÊèêÂèñÂÖ∂ÂÄº„ÄÇÂú®ËôïÁêÜ‰∏çÁ¢∫ÂÆöÈçµÂêçÂ∞çË±°ÊôÇÁâπÂà•ÊúâÁî®„ÄÇ
  const value = err.keyValue ? Object.values(err.keyValue)[0] : "";
  const message = `Duplicate field value: ${value}. Please use another value!`;
  return new AppError(message, 400);
};

// ËôïÁêÜ MongoDB ÁöÑÈ©óË≠âÈåØË™§Ôºàvalidation errorÔºâÔºåÁï∂Ë≥áÊñô‰∏çÁ¨¶ÂêàÊ®°ÂûãÂÆöÁæ©ÁöÑÈ©óË≠âË¶èÂâáÊôÇËß∏Áôº„ÄÇ
const handleValidationErrorDB = (err) => {
  const errors = Object.values(err.errors).map((val) => val.message);
  const message = `Invalid input data. ${errors.join(". ")}`;
  return new AppError(message, 400);
};

// ËôïÁêÜ JSON Web Token (JWT) ÈåØË™§ÔºåÁï∂Êèê‰æõÁöÑ‰ª§ÁâåÁÑ°ÊïàÊôÇËß∏Áôº„ÄÇ
const handleJWTError = (err) => {
  return new AppError("Invalid Token. Please log in again!", 401);
};

// ËôïÁêÜ JWT ÈÅéÊúüÈåØË™§ÔºåÁï∂Êèê‰æõÁöÑ‰ª§ÁâåÂ∑≤ÈÅéÊúüÊôÇËß∏Áôº„ÄÇ
const handleJWTExpireError = (err) => {
  return new AppError("Your token has expired! Please log in again!", 401);
};

const sendErrorDev = (err, req, res) => {
  res.status(err.statusCode).json({
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack, // stack: Â∞±ÊòØÊúâ‰∏ÄÂ†Ü error Ë≥áË®äÁöÑÈÇ£ÂÄã
  });
};

const sendErrorProd = (err, req, res) => {
  if (req.originalUrl.startsWith("/api")) {
    // Áï∂ error ÊòØ operational error ÊôÇÔºåÁôºÈÄÅË©≥Á¥∞ error Áµ¶ client
    if (err.isOperational) {
      return res.status(err.statusCode).json({
        status: err.status,
        message: err.message,
      });
    }
    // Log error
    // console.error("ERROR!üí•üí•üí•", err);

    // Áï∂ error ÊòØ programming Êàñ unknown error ÊôÇÔºåÂè™ÁôºÈÄÅÁ∞°ÂñÆ error message
    return res.status(500).json({
      status: "error",
      message: "Oops! Something went wrong!",
    });
  }
};

module.exports = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || "error";

  if (process.env.NODE_ENV === "development") {
    // In development, we need as much information as possible
    sendErrorDev(err, req, res);
    
  } else if (process.env.NODE_ENV === "production") {
    // error = { ... err } --> shallow copy üëé
    // JSON.parse(JSON.stringify(err)) --> Deep copy üëç
    let error = JSON.parse(JSON.stringify(err));

    if (error.name === "CastError") error = handleCastErrorDB(error);
    if (error.code === 11000) error = handleDuplicateFieldsDB(error);
    if (error.name === "ValidationError")
      error = handleValidationErrorDB(error);
    if (error.name === "JsonWebTokenError") error = handleJWTError(error);
    if (error.name === "TokenExpiredError") error = handleJWTExpireError(error);

    // In production, we don't need error and stack to client
    sendErrorProd(error, req, res);
  }
};
